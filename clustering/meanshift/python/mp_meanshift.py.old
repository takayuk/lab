# -*- encoding: utf-8 -*-
# -*- coding: utf-8 -*-


from multiprocessing import Process, Queue, Manager
#, Lock
#from multiprocessing import Pool

import math
import numpy
import sys


#cluster_table = {}

#def meanshift(data, dataset, iteration, kernel_width, cluster_table):
def meanshift(data, dataset, iteration, kernel_width, proxy_lock):

    n = len(dataset)

    result = [0] * len(data)

    for i in range(len(data)):
        mean = data[i]

        for itr in range(iteration):
            nsum = [0] * 2
            div = 0
            for j in range(n):
                dist = math.sqrt( ((dataset[j][0] - mean[0]) ** 2) + ((dataset[j][1] - mean[1]) ** 2))
                if dist <= kernel_width:
                    nsum[0] += dataset[j][0]
                    nsum[1] += dataset[j][1]
                    div += 1

            nextmean = [0] * 2
            nextmean[0] = float(nsum[0]) / float(div)
            nextmean[1] = float(nsum[1]) / float(div)

            mdist = math.sqrt( ((mean[0] - nextmean[0]) ** 2) + ((mean[1] - nextmean[1]) ** 2))
            if mdist < 3.0e-5:
                break
            mean = nextmean

        result[i] = mean

        is_push = True
        
        proxy_lock.acquire()

        for k in cluster_table.keys():
            cluster_dist = math.sqrt( ((mean[0] - cluster_table[k][0][0]) ** 2) + ((mean[1] - cluster_table[k][0][1]) ** 2)) 
            if cluster_dist < 3.0e-4:
                cluster_table[k].append(data[i])
                is_push = False
                break
        if is_push:
            cluster_table.setdefault(len(cluster_table), [mean, data])
        proxy_lock.release()


def split_seq(seq, size):
    """ リストseqを整数sizeのリストに分割.
    """
    return [seq[i:i+size] for i in range(0, len(seq), size)]

def split_seq2(seq, count):

    size = len(seq) / count
    L = []
    for i in range(0, len(seq), size):
        L.append(seq[i:i+size])
    return L


def plotseq(count):
    
    plotseq = []
    for i in range(count):
        plotseq.append((random.randint(0, 100), random.randint(0, 100)))

    return plotseq


def args():

    script_usage = 'Usage: %s [options] -f <path to validation-set> -o <output_path> --docdist <path to docdist>'

    import optparse
    parser = optparse.OptionParser(usage = script_usage)
    parser.add_option('-f', '--file', dest = 'input_path', default = '')
    parser.add_option('-i', '--iteration', dest = 'iteration', type = 'int', default = 10)
    parser.add_option('-k', '--kernelsize', dest = 'kernel_size', type = 'float', default = '')
    parser.add_option('-m', '--mergethresh', dest = 'merge_thresh', type = 'float', default = '')
    parser.add_option('-o', dest = 'output_path', default = '')

    (opts, args) = parser.parse_args()

    if not (opts.input_path and opts.output_path):
        parser.error(script_usage)

    return (opts, args)


if __name__ == '__main__':

    #lock = Lock()

    dataset = [ line.strip().split() for line in open(options.input_path).readlines() ]
    for i in range(len(dataset)):
        dataset[i] = [ float(data) for data in dataset[i] ]

    seqsize = int(sys.argv[1])
    cpu_count = int(sys.argv[2])

    # Parameters for Artifical dataset.
    true_centers = [ (23, 65), (54, 50), (65, 87) ]
    numpy.random.seed(1)
    dataset = []
    for i in range(seqsize):
        dataset.append(tuple(numpy.random.normal(true_centers[numpy.random.randint(3)], 6)))

    res = split_seq2(dataset, cpu_count)

    print([len(s) for s in res ])

    manager = Manager()
    cluster_table = manager.dict()

    #cluster_table["a"] = []
    #processes = [Process(target = meanshift, args = (res[i], dataset, 10, 0.004495, d)) for i in range(len(res))]
    #processes = [Process(target = meanshift, args = (res[i], dataset, 10, 5, cluster_table)) for i in range(len(res))]
    processes = [Process(target = meanshift, args = (res[i], dataset, 10, 5, lock)) for i in range(len(res))]

    for p in processes:
        p.start()

    for p in processes:
        p.join()

    for k in cluster_table.keys():
        print(cluster_table[k][1:])
    """
    for k, v in d.items():
        print('%d %d' % (k, len(v[1])))
    """
    
    import matplotlib.pylab as plt

    plt.plot([ n[0] for n in dataset ], [ n[1] for n in dataset ], ',')
    plt.savefig('dataset.png')

